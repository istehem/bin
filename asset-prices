#!/usr/bin/python3

import json
import requests
import argparse
from enum import Enum, unique

@unique
class CryptoCurrency(Enum):
    BTC = 'BTC'
    ETH = 'ETH'
    ADA = 'ADA'
    SOL = 'SOL'
    XRP = 'XRP'
    def __str__(self):
        return str(self.value)

class Urls():
    @classmethod
    def metals(cls) -> str:
        raise NotImplementedError()
    @classmethod
    def crypto(cls) -> str:
        return 'https://api.coinlore.net/api/tickers/'

class ArrowLiterals:
    _RED = '\033[91m'
    _GREEN = '\033[92m'
    _ENDC = '\033[0m'
    
    @classmethod
    def arrow_up(cls) -> str:
        return f'{cls._GREEN}\u25B2{cls._ENDC}'
    @classmethod
    def arrow_down(cls) -> str:
        return f'{cls._RED}\u25BC{cls._ENDC}'

def asset_values(crypto_currencies):
    resp = requests.get(Urls.crypto())
    if resp.status_code != 200:
        raise ValueError('GET error {}'.format(resp.status_code))
    parsed_body = resp.json()
    data = resp.json()['data']
    rows = []
    for c in data:
        if c['symbol'] in [ str(ce) for ce in crypto_currencies ]:
            rows.append(format_crypto_currency(c))
    print('\n'.join(rows))

def format_crypto_currency(c):
    price = f'{float(c["price_usd"]):,}' 
    return (
            f'{c["name"]: <8} ({c["symbol"]}): {price.rjust(9)} USD, '
            f'24h {format_trend(c["percent_change_24h"])}, '
            f'7d {format_trend(c["percent_change_7d"])}')

def format_trend(percent_as_string) -> str:
    percent = float(percent_as_string)
    if float(percent) > 0:
        return f'{percent: <4.2f}% {ArrowLiterals.arrow_up()}'
    else:
        return f'{abs(percent): <4.2f}% {ArrowLiterals.arrow_down()}'

if __name__ == '__main__':
    default_currencies = [CryptoCurrency.BTC, CryptoCurrency.ETH, CryptoCurrency.ADA]
    default_currencies_help = ', '.join([ str(c) for c in default_currencies ])
    parser = argparse.ArgumentParser(description='Show asset prices')
    parser.add_argument(
                '-c', 
                '--crypto-currencies',
                nargs='+',
                type=CryptoCurrency,
                help=f'show prices for crypto currencies (default: {default_currencies_help})')

    args = parser.parse_args()
    if args.crypto_currencies:
        asset_values(args.crypto_currencies)
    else:
        asset_values(default_currencies)
