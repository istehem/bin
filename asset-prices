#!/usr/bin/python3

import json
import requests
import argparse
from datetime import date
from datetime import timedelta
from enum import Enum, unique

@unique
class CryptoCurrency(Enum):
    BTC = 'BTC'
    ETH = 'ETH'
    ADA = 'ADA'
    SOL = 'SOL'
    XRP = 'XRP'
    def __str__(self):
        return str(self.value)

@unique
class Metals(Enum):
    XAU = 'XAU'
    def __str__(self):
        return str(self.value)

class Urls():
    _GOLD_API_KEY = 'k2p0hdizqchkv78o18e5za0k4zl1idzj36e8mow8354h95uxf85uzptvrjom'
    _GOLD_API_KEY_PARAM = 'access_key'
    @classmethod
    def metals_price(cls) -> str:
        return ('https://metals-api.com/api/latest?' +
            f'{cls._GOLD_API_KEY_PARAM}={cls._GOLD_API_KEY}')
    @classmethod
    def metals_fluctuation(cls) -> str:
        return ('https://metals-api.com/api/fluctuation?' +
            f'{cls._GOLD_API_KEY_PARAM}={cls._GOLD_API_KEY}')
    @classmethod
    def crypto(cls) -> str:
        return 'https://api.coinlore.net/api/tickers/'

class ArrowLiterals:
    _RED = '\033[31m'
    _GREEN = '\033[32m'
    _ENDC = '\033[0m'

    @classmethod
    def arrow_up(cls) -> str:
        return f'{cls._GREEN}\u25B2{cls._ENDC}'
    @classmethod
    def arrow_down(cls) -> str:
        return f'{cls._RED}\u25BC{cls._ENDC}'

def crypto_prices(crypto_currencies, show_cap) -> str:
    resp = requests.get(Urls.crypto())
    if resp.status_code != 200:
        raise ValueError('GET error {}'.format(resp.status_code))
    data = resp.json()['data']
    rows = []
    for c in data:
        if c['symbol'] in [ str(ce) for ce in crypto_currencies ]:
            rows.append(format_crypto_currency(c, show_cap))
    return '\n'.join(rows)

def asset_values(crypto_currencies, show_cap, show_gold_price):
    print(crypto_prices(crypto_currencies, show_cap))
    if show_gold_price:
        print(f'\n{gold_price()}')

def format_crypto_currency(c, show_cap):
    price = f'{float(c["price_usd"]):,}'
    cap = f'{float(c["market_cap_usd"]):,}'
    row = []
    row.append(f'{c["name"]: <8} ({c["symbol"]}): {price.rjust(9)} USD')
    row.append(f'24h {format_trend(c["percent_change_24h"])}')
    row.append(f'7d {format_trend(c["percent_change_7d"])}')
    if show_cap:
        row.append(f'cap {cap.rjust(18)} USD')
    return ', '.join(row)

def format_trend(percent_as_string) -> str:
    percent = float(percent_as_string)
    if float(percent) >= 0:
        return f'{percent: <5.2f}% {ArrowLiterals.arrow_up()}'
    else:
        return f'{abs(percent): <5.2f}% {ArrowLiterals.arrow_down()}'

def crypto_currency_parser(s):
    try:
        return CryptoCurrency[s.upper()]
    except KeyError:
        raise argparse.ArgumentTypeError(f'invalid {CryptoCurrency.__name__} value \'{s}\'')

def gold_trend(start_date, end_date) -> str:
    params = dict()
    params['start_date'] = start_date
    params['end_date'] = end_date
    params['type'] = 'weekly'
    params['symbols'] = Metals.XAU
    resp = requests.get(Urls.metals_fluctuation(), params = params)
    if resp.status_code != 200:
        raise ValueError('GET error {}'.format(resp.status_code))
    json_resp = resp.json()
    gold_rate = json_resp['rates'][f'{start_date}:{end_date}'][str(Metals.XAU)]
    start_rate = gold_rate['start_rate']
    end_rate = gold_rate['end_rate']
    sign = 1 if float(end_rate) < float(start_rate) else -1
    return sign*gold_rate['change_pct']


def gold_price() -> str:
    params = dict()
    params['symbols'] = Metals.XAU
    resp = requests.get(Urls.metals_price(), params = params)
    if resp.status_code != 200:
        raise ValueError('GET error {}'.format(resp.status_code))
    json_resp = resp.json()
    rate = json_resp['rates'][str(Metals.XAU)]
    base = json_resp['base']
    unit = json_resp['unit']
    end_date = date.today()
    week_trend = gold_trend(end_date - timedelta(days = 7), end_date)
    day_trend = gold_trend(end_date - timedelta(days = 1), end_date)
    row = []
    row.append(f'Gold ({Metals.XAU}): {1/rate:.2f} {base} {unit}')
    row.append(f'24h {format_trend(day_trend)}')
    row.append(f'7d {format_trend(week_trend)}')
    return ', '.join(row)

if __name__ == '__main__':
    default_currencies = [CryptoCurrency.BTC, CryptoCurrency.ETH, CryptoCurrency.ADA]
    default_currencies_help = ', '.join([ str(c) for c in default_currencies ])
    parser = argparse.ArgumentParser(description='Show asset prices')
    parser.add_argument(
                '-c',
                '--crypto-currencies',
                nargs='+',
                type=lambda s: crypto_currency_parser(s),
                help=f'show prices for crypto currencies (default: {default_currencies_help})')
    parser.add_argument('-mc', '--market-capitalization', action='store_true',
                            help='show market capitalization')
    parser.add_argument('-g', '--gold-price', action='store_true',
                            help='show gold price')

    args = parser.parse_args()
    if args.crypto_currencies:
        asset_values(args.crypto_currencies, args.market_capitalization, args.gold_price)
    else:
        asset_values(default_currencies, args.market_capitalization, args.gold_price)
